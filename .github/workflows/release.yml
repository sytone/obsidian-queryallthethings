name: Release Obsidian Plugin
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '*' # Push events to matching any tag format, i.e. 1.0, 20.15.10

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Get the version number and put it in a variable
      # - name: Get Version
      #   id: version
      #   run: |
      #     echo "::set-output name=tag::$(git describe --abbrev=0)"

      - name: Get Version
        id: version
        run: |
          echo "tag=$(git describe --abbrev=0)" >> $GITHUB_OUTPUT

      # Build the plugin
      - name: Build
        id: build
        run: |
          yarn
          yarn run build

      # Package the required files into a zip
      - name: Package Plugin ðŸ“¦
        run: |
          mkdir ${{ github.event.repository.name }}
          cp ./dist/main.js ./dist/manifest.json ./dist/styles.css README.md ${{ github.event.repository.name }}
          zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}

      # Package the vault files into a zip
      - name: Package Vault ðŸ“¦
        run: |
          mkdir ${{ github.event.repository.name }}/vault
          cp -R docs/. ${{ github.event.repository.name }}/vault
          zip -r ${{ github.event.repository.name }}.vault.zip ${{ github.event.repository.name }}/vault

      # Get the release notes from the changelog.
      - name: Get notes
        id: generate_notes
        uses: mckrava/standard-version-release-notes@v1.1.0
        with:
          tag_name: ${{ github.ref }}
          tag_name_ref_view: true
          changelog: CHANGELOG.md

      - name: Release
        uses: ncipollo/release-action@v1
        id: release_plugin
        with:
          artifacts: './${{ github.event.repository.name }}.zip,./${{ github.event.repository.name }}.vault.zip,./dist/main.js,./dist/manifest.json,./dist/styles.css'
          body: ${{join(fromJson(steps.generate_notes.outputs.notes).notes, '')}}
          name: ${{ github.ref }}
#      - name: Release
#        uses: softprops/action-gh-release@v1
#        with:
#          body: ${{join(fromJson(steps.generate_notes.outputs.notes).notes, '')}}
#          # note you'll typically need to create a personal access token
#          # with permissions to create releases in the other repo
#          token: ${{ secrets.GITHUB_TOKEN }}
#          draft: false
#          prerelease: false
#          tag_name: ${{ github.ref }}
#          files: |
#            ./${{ github.event.repository.name }}.zip
#            ./${{ github.event.repository.name }}.vault.zip
#            ./dist/main.js
#            ./dist/manifest.json
#            ./dist/styles.css
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          VERSION: ${{ github.ref }}
